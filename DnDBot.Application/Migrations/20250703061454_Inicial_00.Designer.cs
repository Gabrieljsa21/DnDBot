// <auto-generated />
using System;
using DnDBot.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DnDBot.Application.Migrations
{
    [DbContext(typeof(DnDBotDbContext))]
    [Migration("20250703061454_Inicial_00")]
    partial class Inicial_00
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Antecedente", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdiomasAdicionais")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requisitos")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Antecedente");
                });

            modelBuilder.Entity("Classe_Pericia", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "PericiaId");

                    b.HasIndex("PericiaId");

                    b.ToTable("Classe_Pericia", (string)null);
                });

            modelBuilder.Entity("DnDBot.Application.Models.Antecedente.Antecedente.Defeito", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdAntecedente")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AntecedenteId");

                    b.ToTable("Defeito");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Antecedente.Antecedente.Ideal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdAntecedente")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AntecedenteId");

                    b.ToTable("Ideal");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Antecedente.Antecedente.Vinculo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdAntecedente")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AntecedenteId");

                    b.ToTable("Vinculo");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Arma", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Alcance")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlcanceArremesso")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AreaAtaque")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AtaquesEspeciais")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("BonusContraTipos")
                        .HasColumnType("TEXT");

                    b.Property<int>("BonusMagico")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Categoria")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Custo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CustoReparo")
                        .HasColumnType("TEXT");

                    b.Property<string>("DadoDano")
                        .HasColumnType("TEXT");

                    b.Property<string>("DadoDanoVersatil")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<int>("DurabilidadeAtual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurabilidadeMaxima")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EMagica")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EhDuasMaos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EhLeve")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EhVersatil")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fabricante")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icone")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("MagiasAssociadas")
                        .HasColumnType("TEXT");

                    b.Property<int>("MunicaoPorAtaque")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<double>("Peso")
                        .HasColumnType("REAL");

                    b.Property<bool>("PodeSerArremessada")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("PropriedadesEspeciais")
                        .HasColumnType("TEXT");

                    b.Property<string>("Raridade")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegraCritico")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequerRecarga")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Requisitos")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<int>("TempoRecargaTurnos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoAcao")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoDano")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TipoDanoSecundario")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoMunicao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Arma");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Armadura", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("BonusMagico")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClasseArmadura")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Custo")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescricaoDetalhada")
                        .HasColumnType("TEXT");

                    b.Property<int>("DurabilidadeAtual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurabilidadeMaxima")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EMagica")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fabricante")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icone")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ImunidadesDano")
                        .HasColumnType("TEXT");

                    b.Property<string>("Material")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("PenalidadeFurtividade")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PermiteFurtividade")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Peso")
                        .HasColumnType("REAL");

                    b.PrimitiveCollection<string>("PropriedadesEspeciais")
                        .HasColumnType("TEXT");

                    b.Property<string>("Raridade")
                        .HasColumnType("TEXT");

                    b.Property<int>("RequisitoForca")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("ResistenciasDano")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Armadura");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Caracteristica", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AntecedenteId");

                    b.HasIndex("FichaPersonagemId");

                    b.ToTable("Caracteristica");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Equipamento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AntecedenteId");

                    b.ToTable("Equipamento");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.Alinhamento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Alinhamento");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ArmaAuxiliares.ArmaRequisitoAtributo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArmaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Atributo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArmaId");

                    b.ToTable("ArmaRequisitoAtributo");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.BonusAtributo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Atributo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Origem")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerType")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FichaPersonagemId");

                    b.HasIndex("SubRacaId");

                    b.ToTable("BonusAtributo");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.CaracteristicaPorNivel", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaracteristicaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubclasseId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "Nivel", "CaracteristicaId");

                    b.HasIndex("CaracteristicaId");

                    b.HasIndex("ClasseId1");

                    b.HasIndex("SubclasseId");

                    b.ToTable("CaracteristicaPorNivel");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.Classe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DadoVida")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdHabilidadeConjuracao")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("IdItensIniciais")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("IdSalvaguardas")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Notas")
                        .HasColumnType("TEXT");

                    b.Property<string>("PapelTatico")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SubclassePorNivel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsaMagiaPreparada")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Classe");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClasseMagia", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "MagiaId");

                    b.HasIndex("MagiaId");

                    b.ToTable("ClasseMagias");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClassePericia", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "PericiaId");

                    b.HasIndex("PericiaId");

                    b.ToTable("ClassePericias");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClasseProficienciaArma", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArmaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "ArmaId");

                    b.HasIndex("ArmaId");

                    b.ToTable("ClasseProficienciasArmas");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClasseProficienciaArmadura", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArmaduraId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "ArmaduraId");

                    b.HasIndex("ArmaduraId");

                    b.ToTable("ClasseProficienciasArmaduras");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClasseProficienciaMulticlasse", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdProficiencia")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "IdProficiencia");

                    b.ToTable("ClasseProficienciasMulticlasse");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClasseSalvaguarda", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSalvaguarda")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "IdSalvaguarda");

                    b.ToTable("ClasseSalvaguardas");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.DificuldadePericia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.Property<int>("Valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PericiaId");

                    b.HasIndex("PericiaId1");

                    b.ToTable("DificuldadePericia");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.EspacoMagiaPorNivel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoMagia")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.ToTable("EspacoMagiaPorNivel");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.Ferramenta", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EMagica")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icone")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<double>("Peso")
                        .HasColumnType("REAL");

                    b.Property<bool>("RequerProficiencia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AntecedenteId");

                    b.ToTable("Ferramenta");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.FichaPersonagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Carisma")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Constituicao")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<int>("Deslocamento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Destreza")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EstaAtivo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Forca")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdAlinhamento")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdAntecedente")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdClasse")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("IdJogador")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdRaca")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSubraca")
                        .HasColumnType("TEXT");

                    b.Property<int>("Inteligencia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Sabedoria")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tamanho")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VisaoNoEscuro")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FichaPersonagem");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.HistoricoFinanceiroItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FichaPersonagemId1")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FoiAutomatico")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ItemRelacionadoId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Origem")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PersonagemDestinoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FichaPersonagemId");

                    b.HasIndex("FichaPersonagemId1");

                    b.ToTable("HistoricoFinanceiroItem");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.QuantidadePorNivel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.HasIndex("ClasseId1");

                    b.ToTable("QuantidadePorNivel");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.Raca", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Raca");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.RequisitoMulticlasse", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Atributo")
                        .HasColumnType("TEXT");

                    b.Property<int>("Valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClasseId", "Atributo");

                    b.ToTable("RequisitoMulticlasse");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.SubRaca", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<int>("Deslocamento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdRaca")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("RacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tamanho")
                        .HasColumnType("TEXT");

                    b.Property<string>("TendenciasComuns")
                        .HasColumnType("TEXT");

                    b.Property<int>("VisaoNoEscuro")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RacaId");

                    b.ToTable("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.Subclasse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.ToTable("Subclasse");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Idioma", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AntecedenteId");

                    b.HasIndex("FichaPersonagemId");

                    b.ToTable("Idioma");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Magia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Alcance")
                        .HasColumnType("TEXT");

                    b.Property<string>("Alvo")
                        .HasColumnType("TEXT");

                    b.Property<string>("AreaEfeito")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtributoTesteResistencia")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ClassesPermitidas")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ComponenteMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ComponenteMaterialConsumido")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ComponenteSomatico")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ComponenteVerbal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Concentração")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("CondicoesAplicadas")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("CondicoesRemovidas")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustoComponenteMaterial")
                        .HasColumnType("TEXT");

                    b.Property<string>("DadoDano")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetalhesMaterial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Duracao")
                        .HasColumnType("TEXT");

                    b.Property<string>("EfeitoPorTurno")
                        .HasColumnType("TEXT");

                    b.Property<string>("Escalonamento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Escola")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FocoNecessario")
                        .HasColumnType("TEXT");

                    b.Property<string>("FonteLivro")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Fontes")
                        .HasColumnType("TEXT");

                    b.Property<string>("LimiteUso")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MetadeNoTeste")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nivel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotasInternas")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumeroDeUsos")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumeroMaximoAlvos")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaginaLivro")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PodeSerRitual")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Recarga")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequerLinhaDeVisao")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequerLinhaReta")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<string>("TempoConjuracao")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoDano")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoUso")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FichaPersonagemId");

                    b.ToTable("Magia");
                });

            modelBuilder.Entity("DnDBot.Application.Models.OpcaoEscolha<DnDBot.Application.Models.Equipamento>", b =>
                {
                    b.Property<int>("QuantidadeEscolhas")
                        .HasColumnType("INTEGER");

                    b.ToTable("OpcaoEscolha<Equipamento>");
                });

            modelBuilder.Entity("DnDBot.Application.Models.OpcaoEscolha<DnDBot.Application.Models.Idioma>", b =>
                {
                    b.Property<int>("QuantidadeEscolhas")
                        .HasColumnType("INTEGER");

                    b.ToTable("OpcaoEscolha<Idioma>");
                });

            modelBuilder.Entity("DnDBot.Application.Models.OpcaoEscolha<DnDBot.Application.Models.Pericia>", b =>
                {
                    b.Property<int>("QuantidadeEscolhas")
                        .HasColumnType("INTEGER");

                    b.ToTable("OpcaoEscolha<Pericia>");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Pericia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtributoBase")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AtributosAlternativos")
                        .HasColumnType("TEXT");

                    b.Property<int>("BonusAdicional")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusBase")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EhProficiente")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icone")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TemEspecializacao")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AntecedenteId");

                    b.ToTable("Pericia");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Proficiencia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FichaPersonagemId");

                    b.ToTable("Proficiencia");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Resistencia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoDano")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FichaPersonagemId");

                    b.ToTable("Resistencia");
                });

            modelBuilder.Entity("FerramentaPericia", b =>
                {
                    b.Property<string>("FerramentaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("FerramentaId", "PericiaId");

                    b.HasIndex("PericiaId");

                    b.ToTable("FerramentaPericia");
                });

            modelBuilder.Entity("SubRaca_Caracteristicas", b =>
                {
                    b.Property<string>("CaracteristicaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.HasKey("CaracteristicaId", "SubRacaId");

                    b.HasIndex("SubRacaId");

                    b.ToTable("SubRaca_Caracteristicas");
                });

            modelBuilder.Entity("SubRaca_Idiomas", b =>
                {
                    b.Property<string>("IdiomaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.HasKey("IdiomaId", "SubRacaId");

                    b.HasIndex("SubRacaId");

                    b.ToTable("SubRaca_Idiomas");
                });

            modelBuilder.Entity("SubRaca_MagiasRaciais", b =>
                {
                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.HasKey("MagiaId", "SubRacaId");

                    b.HasIndex("SubRacaId");

                    b.ToTable("SubRaca_MagiasRaciais");
                });

            modelBuilder.Entity("SubRaca_Proficiencias", b =>
                {
                    b.Property<string>("ProficienciaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProficienciaId", "SubRacaId");

                    b.HasIndex("SubRacaId");

                    b.ToTable("SubRaca_Proficiencias");
                });

            modelBuilder.Entity("SubRaca_Resistencias", b =>
                {
                    b.Property<string>("ResistenciaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ResistenciaId", "SubRacaId");

                    b.HasIndex("SubRacaId");

                    b.ToTable("SubRaca_Resistencias");
                });

            modelBuilder.Entity("Antecedente", b =>
                {
                    b.OwnsMany("DnDBot.Application.Models.Enums.Moeda", "RiquezaInicial", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AntecedenteId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Quantidade")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Tipo")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("AntecedenteId");

                            b1.ToTable("Antecedente_RiquezaInicial", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AntecedenteId");
                        });

                    b.Navigation("RiquezaInicial");
                });

            modelBuilder.Entity("Classe_Pericia", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", null)
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Classe_Pericia_Classe");

                    b.HasOne("DnDBot.Application.Models.Pericia", null)
                        .WithMany()
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Classe_Pericia_Pericia");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Antecedente.Antecedente.Defeito", b =>
                {
                    b.HasOne("Antecedente", null)
                        .WithMany("Defeitos")
                        .HasForeignKey("AntecedenteId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Antecedente.Antecedente.Ideal", b =>
                {
                    b.HasOne("Antecedente", null)
                        .WithMany("Ideais")
                        .HasForeignKey("AntecedenteId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Antecedente.Antecedente.Vinculo", b =>
                {
                    b.HasOne("Antecedente", null)
                        .WithMany("Vinculos")
                        .HasForeignKey("AntecedenteId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Caracteristica", b =>
                {
                    b.HasOne("Antecedente", null)
                        .WithMany("IdFeature")
                        .HasForeignKey("AntecedenteId");

                    b.HasOne("DnDBot.Application.Models.Ficha.FichaPersonagem", null)
                        .WithMany("Caracteristicas")
                        .HasForeignKey("FichaPersonagemId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Equipamento", b =>
                {
                    b.HasOne("Antecedente", null)
                        .WithMany("EquipamentosDetalhados")
                        .HasForeignKey("AntecedenteId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ArmaAuxiliares.ArmaRequisitoAtributo", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Arma", "Arma")
                        .WithMany("RequisitosAtributos")
                        .HasForeignKey("ArmaId");

                    b.Navigation("Arma");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.BonusAtributo", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.FichaPersonagem", null)
                        .WithMany("BonusAtributos")
                        .HasForeignKey("FichaPersonagemId");

                    b.HasOne("DnDBot.Application.Models.Ficha.SubRaca", null)
                        .WithMany("BonusAtributos")
                        .HasForeignKey("SubRacaId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.CaracteristicaPorNivel", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Caracteristica", "Caracteristica")
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", null)
                        .WithMany("CaracteristicasPorNivelList")
                        .HasForeignKey("ClasseId1");

                    b.HasOne("DnDBot.Application.Models.Ficha.Subclasse", null)
                        .WithMany("CaracteristicasPorNivelList")
                        .HasForeignKey("SubclasseId");

                    b.Navigation("Caracteristica");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.Classe", b =>
                {
                    b.OwnsMany("DnDBot.Application.Models.Enums.Moeda", "RiquezaInicial", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<string>("ClasseId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Quantidade")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Tipo")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("ClasseId");

                            b1.ToTable("Classe_RiquezaInicial", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClasseId");
                        });

                    b.Navigation("RiquezaInicial");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClasseMagia", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClassePericia", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Pericia", "Pericia")
                        .WithMany()
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Pericia");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClasseProficienciaArma", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Arma", "Arma")
                        .WithMany()
                        .HasForeignKey("ArmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arma");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClasseProficienciaArmadura", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Armadura", "Armadura")
                        .WithMany()
                        .HasForeignKey("ArmaduraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armadura");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClasseProficienciaMulticlasse", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.ClasseAuxiliares.ClasseSalvaguarda", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.DificuldadePericia", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Pericia", null)
                        .WithMany("Dificuldades")
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDBot.Application.Models.Pericia", "Pericia")
                        .WithMany()
                        .HasForeignKey("PericiaId1");

                    b.Navigation("Pericia");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.EspacoMagiaPorNivel", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", "Classe")
                        .WithMany("EspacosMagia")
                        .HasForeignKey("ClasseId");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.Ferramenta", b =>
                {
                    b.HasOne("Antecedente", null)
                        .WithMany("Ferramentas")
                        .HasForeignKey("AntecedenteId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.FichaPersonagem", b =>
                {
                    b.OwnsOne("DnDBot.Application.Models.Ficha.BolsaDeMoedas", "BolsaDeMoedas", b1 =>
                        {
                            b1.Property<Guid>("FichaPersonagemId")
                                .HasColumnType("TEXT");

                            b1.HasKey("FichaPersonagemId");

                            b1.ToTable("FichaPersonagem");

                            b1.WithOwner()
                                .HasForeignKey("FichaPersonagemId");

                            b1.OwnsMany("DnDBot.Application.Models.Enums.Moeda", "Moedas", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<Guid>("FichaPersonagemId")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("Quantidade")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Tipo")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("FichaPersonagemId");

                                    b2.ToTable("FichaPersonagem_BolsaDeMoedas_Moedas", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("FichaPersonagemId");
                                });

                            b1.Navigation("Moedas");
                        });

                    b.Navigation("BolsaDeMoedas");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.HistoricoFinanceiroItem", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany()
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Ficha.FichaPersonagem", null)
                        .WithMany("HistoricoFinanceiro")
                        .HasForeignKey("FichaPersonagemId1");

                    b.OwnsOne("DnDBot.Application.Models.Ficha.BolsaDeMoedas", "SaldoApos", b1 =>
                        {
                            b1.Property<int>("HistoricoFinanceiroItemId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("HistoricoFinanceiroItemId");

                            b1.ToTable("HistoricoFinanceiroItem");

                            b1.WithOwner()
                                .HasForeignKey("HistoricoFinanceiroItemId");

                            b1.OwnsMany("DnDBot.Application.Models.Enums.Moeda", "Moedas", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("HistoricoFinanceiroItemId_Saldo")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("Quantidade")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Tipo")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("HistoricoFinanceiroItemId_Saldo");

                                    b2.ToTable("HistoricoFinanceiroItem_SaldoApos_Moedas", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("HistoricoFinanceiroItemId_Saldo");
                                });

                            b1.Navigation("Moedas");
                        });

                    b.OwnsOne("DnDBot.Application.Models.Ficha.BolsaDeMoedas", "Valor", b1 =>
                        {
                            b1.Property<int>("HistoricoFinanceiroItemId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("HistoricoFinanceiroItemId");

                            b1.ToTable("HistoricoFinanceiroItem");

                            b1.WithOwner()
                                .HasForeignKey("HistoricoFinanceiroItemId");

                            b1.OwnsMany("DnDBot.Application.Models.Enums.Moeda", "Moedas", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("HistoricoFinanceiroItemId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("Quantidade")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Tipo")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("HistoricoFinanceiroItemId");

                                    b2.ToTable("HistoricoFinanceiroItem_Valor_Moedas", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("HistoricoFinanceiroItemId");
                                });

                            b1.Navigation("Moedas");
                        });

                    b.Navigation("FichaPersonagem");

                    b.Navigation("SaldoApos");

                    b.Navigation("Valor");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.QuantidadePorNivel", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", "Classe")
                        .WithMany("TruquesConhecidosPorNivelList")
                        .HasForeignKey("ClasseId");

                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", null)
                        .WithMany("MagiasConhecidasPorNivelList")
                        .HasForeignKey("ClasseId1");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.RequisitoMulticlasse", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", "Classe")
                        .WithMany("RequisitosParaMulticlasseEntities")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.SubRaca", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.Raca", "Raca")
                        .WithMany("SubRaca")
                        .HasForeignKey("RacaId");

                    b.Navigation("Raca");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.Subclasse", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.Classe", null)
                        .WithMany("Subclasses")
                        .HasForeignKey("ClasseId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Idioma", b =>
                {
                    b.HasOne("Antecedente", null)
                        .WithMany("Idiomas")
                        .HasForeignKey("AntecedenteId");

                    b.HasOne("DnDBot.Application.Models.Ficha.FichaPersonagem", null)
                        .WithMany("Idiomas")
                        .HasForeignKey("FichaPersonagemId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Magia", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.FichaPersonagem", null)
                        .WithMany("MagiasRaciais")
                        .HasForeignKey("FichaPersonagemId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Pericia", b =>
                {
                    b.HasOne("Antecedente", null)
                        .WithMany("Pericias")
                        .HasForeignKey("AntecedenteId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Proficiencia", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.FichaPersonagem", null)
                        .WithMany("Proficiencias")
                        .HasForeignKey("FichaPersonagemId");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Resistencia", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.FichaPersonagem", null)
                        .WithMany("Resistencias")
                        .HasForeignKey("FichaPersonagemId");
                });

            modelBuilder.Entity("FerramentaPericia", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Ficha.Ferramenta", null)
                        .WithMany()
                        .HasForeignKey("FerramentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Pericia", null)
                        .WithMany()
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubRaca_Caracteristicas", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Caracteristica", null)
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Ficha.SubRaca", null)
                        .WithMany()
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubRaca_Idiomas", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Idioma", null)
                        .WithMany()
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Ficha.SubRaca", null)
                        .WithMany()
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubRaca_MagiasRaciais", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Magia", null)
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Ficha.SubRaca", null)
                        .WithMany()
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubRaca_Proficiencias", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Proficiencia", null)
                        .WithMany()
                        .HasForeignKey("ProficienciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Ficha.SubRaca", null)
                        .WithMany()
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubRaca_Resistencias", b =>
                {
                    b.HasOne("DnDBot.Application.Models.Resistencia", null)
                        .WithMany()
                        .HasForeignKey("ResistenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Application.Models.Ficha.SubRaca", null)
                        .WithMany()
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Antecedente", b =>
                {
                    b.Navigation("Defeitos");

                    b.Navigation("EquipamentosDetalhados");

                    b.Navigation("Ferramentas");

                    b.Navigation("IdFeature");

                    b.Navigation("Ideais");

                    b.Navigation("Idiomas");

                    b.Navigation("Pericias");

                    b.Navigation("Vinculos");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Arma", b =>
                {
                    b.Navigation("RequisitosAtributos");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.Classe", b =>
                {
                    b.Navigation("CaracteristicasPorNivelList");

                    b.Navigation("EspacosMagia");

                    b.Navigation("MagiasConhecidasPorNivelList");

                    b.Navigation("RequisitosParaMulticlasseEntities");

                    b.Navigation("Subclasses");

                    b.Navigation("TruquesConhecidosPorNivelList");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.FichaPersonagem", b =>
                {
                    b.Navigation("BonusAtributos");

                    b.Navigation("Caracteristicas");

                    b.Navigation("HistoricoFinanceiro");

                    b.Navigation("Idiomas");

                    b.Navigation("MagiasRaciais");

                    b.Navigation("Proficiencias");

                    b.Navigation("Resistencias");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.Raca", b =>
                {
                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.SubRaca", b =>
                {
                    b.Navigation("BonusAtributos");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Ficha.Subclasse", b =>
                {
                    b.Navigation("CaracteristicasPorNivelList");
                });

            modelBuilder.Entity("DnDBot.Application.Models.Pericia", b =>
                {
                    b.Navigation("Dificuldades");
                });
#pragma warning restore 612, 618
        }
    }
}
