// <auto-generated />
using System;
using DnDBot.Bot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DnDBot.Bot.Migrations
{
    [DbContext(typeof(DnDBotDbContext))]
    [Migration("20250710212418_Inicial_00")]
    partial class Inicial_00
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("DnDBot.Bot.Models.AntecedenteModels.Antecedente", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdiomasAdicionais")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Antecedente");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.AntecedenteModels.Defeito", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Defeito");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.AntecedenteModels.Ideal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ideal");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.AntecedenteModels.Vinculo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Vinculo");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Alinhamento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Alinhamento");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AlinhamentoTag", b =>
                {
                    b.Property<string>("AlinhamentoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("AlinhamentoId", "Tag");

                    b.ToTable("AlinhamentoTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteCaracteristica", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaracteristicaId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "CaracteristicaId");

                    b.HasIndex("CaracteristicaId");

                    b.ToTable("AntecedenteCaracteristica");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteDefeito", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefeitoId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "DefeitoId");

                    b.HasIndex("DefeitoId");

                    b.ToTable("AntecedenteDefeito");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteFerramenta", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FerramentaId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "FerramentaId");

                    b.HasIndex("FerramentaId");

                    b.ToTable("AntecedenteFerramenta");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteIdeal", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdealId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "IdealId");

                    b.HasIndex("IdealId");

                    b.ToTable("AntecedenteIdeal");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteIdioma", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdiomaId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "IdiomaId");

                    b.HasIndex("IdiomaId");

                    b.ToTable("AntecedenteIdioma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteItem", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("AntecedenteItem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteMoeda", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoedaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.HasKey("AntecedenteId", "MoedaId");

                    b.HasIndex("MoedaId");

                    b.ToTable("AntecedenteMoeda");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedentePericia", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "PericiaId");

                    b.HasIndex("PericiaId");

                    b.ToTable("AntecedentePericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteTag", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "Tag");

                    b.ToTable("AntecedenteTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteVinculo", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VinculoId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "VinculoId");

                    b.HasIndex("VinculoId");

                    b.ToTable("AntecedenteVinculo");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaRequisitoAtributo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArmaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Atributo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArmaId");

                    b.ToTable("ArmaRequisitoAtributo");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaTag", b =>
                {
                    b.Property<string>("ArmaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("ArmaId", "Tag");

                    b.ToTable("ArmaTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaduraTag", b =>
                {
                    b.Property<string>("ArmaduraId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("ArmaduraId", "Tag");

                    b.ToTable("ArmaduraTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseItens", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "ItemId");

                    b.HasIndex("ClasseId1");

                    b.HasIndex("ItemId");

                    b.ToTable("ClasseItens");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseMagia", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "MagiaId");

                    b.HasIndex("ClasseId1");

                    b.HasIndex("MagiaId");

                    b.ToTable("ClasseMagias");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseMoeda", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoedaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "MoedaId");

                    b.HasIndex("MoedaId");

                    b.ToTable("ClasseMoeda");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClassePericia", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "PericiaId");

                    b.HasIndex("ClasseId1");

                    b.HasIndex("PericiaId");

                    b.ToTable("ClassePericias");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseProficiencia", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProficienciaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "ProficienciaId");

                    b.HasIndex("ClasseId1");

                    b.HasIndex("ProficienciaId");

                    b.ToTable("ClasseProficienciasArmas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseSalvaguarda", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSalvaguarda")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "IdSalvaguarda");

                    b.ToTable("ClasseSalvaguardas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseTag", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "Tag");

                    b.ToTable("ClasseTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FerramentaTag", b =>
                {
                    b.Property<string>("FerramentaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("FerramentaId", "Tag");

                    b.ToTable("FerramentaTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemCaracteristica", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaracteristicaId")
                        .HasColumnType("TEXT");

                    b.HasKey("FichaPersonagemId", "CaracteristicaId");

                    b.HasIndex("CaracteristicaId");

                    b.ToTable("FichaPersonagemCaracteristica");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemIdioma", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdiomaId")
                        .HasColumnType("TEXT");

                    b.HasKey("FichaPersonagemId", "IdiomaId");

                    b.HasIndex("IdiomaId");

                    b.ToTable("FichaPersonagemIdioma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemMagia", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("FichaPersonagemId", "MagiaId");

                    b.HasIndex("MagiaId");

                    b.ToTable("FichaPersonagemMagia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemProficiencia", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProficienciaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("BonusAdicional")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TemEspecializacao")
                        .HasColumnType("INTEGER");

                    b.HasKey("FichaPersonagemId", "ProficienciaId");

                    b.HasIndex("ProficienciaId");

                    b.ToTable("FichaPersonagemProficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemResistencia", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResistenciaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoDano")
                        .HasColumnType("INTEGER");

                    b.HasKey("FichaPersonagemId", "ResistenciaId");

                    b.HasIndex("ResistenciaId");

                    b.ToTable("FichaPersonagemResistencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemTag", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("FichaPersonagemId", "Tag");

                    b.ToTable("FichaPersonagemTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaClassePermitida", b =>
                {
                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Classe")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MagiaId1")
                        .HasColumnType("TEXT");

                    b.HasKey("MagiaId", "Classe");

                    b.HasIndex("MagiaId1");

                    b.ToTable("MagiaClassePermitida");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaCondicaoAplicada", b =>
                {
                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Condicao")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MagiaId1")
                        .HasColumnType("TEXT");

                    b.HasKey("MagiaId", "Condicao");

                    b.HasIndex("MagiaId1");

                    b.ToTable("MagiaCondicaoAplicada");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaCondicaoRemovida", b =>
                {
                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Condicao")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MagiaId1")
                        .HasColumnType("TEXT");

                    b.HasKey("MagiaId", "Condicao");

                    b.HasIndex("MagiaId1");

                    b.ToTable("MagiaCondicaoRemovida");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaTag", b =>
                {
                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("MagiaId", "Tag");

                    b.ToTable("MagiaTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.RacaTag", b =>
                {
                    b.Property<string>("RacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("RacaId", "Tag");

                    b.ToTable("RacaTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaAlinhamento", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlinhamentoId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "AlinhamentoId");

                    b.HasIndex("AlinhamentoId");

                    b.ToTable("SubRacaAlinhamento");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaCaracteristica", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaracteristicaId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "CaracteristicaId");

                    b.HasIndex("CaracteristicaId");

                    b.ToTable("SubRacaCaracteristica");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaIdioma", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdiomaId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "IdiomaId");

                    b.HasIndex("IdiomaId");

                    b.ToTable("SubRacaIdioma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaMagia", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "MagiaId");

                    b.HasIndex("MagiaId");

                    b.ToTable("SubRacaMagia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaProficiencia", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProficienciaId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "ProficienciaId");

                    b.HasIndex("ProficienciaId");

                    b.ToTable("SubRacaProficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaResistencia", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResistenciaId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "ResistenciaId");

                    b.HasIndex("ResistenciaId");

                    b.ToTable("SubRacaResistencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaTag", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "Tag");

                    b.ToTable("SubRacaTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.BonusAtributo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Atributo")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Origem")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FichaPersonagemId");

                    b.HasIndex("SubRacaId");

                    b.ToTable("BonusAtributos", (string)null);
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Caracteristica", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AcaoRequerida")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alvo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CondicaoAtivacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DuracaoEmRodadas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fonte")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("NivelMaximo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NivelMinimo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrigemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UsosPorDescansoCurto")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UsosPorDescansoLongo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Caracteristica");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.CaracteristicaPorNivel", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaracteristicaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubclasseId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "Nivel", "CaracteristicaId");

                    b.HasIndex("CaracteristicaId");

                    b.HasIndex("ClasseId1");

                    b.HasIndex("SubclasseId");

                    b.ToTable("CaracteristicaPorNivel");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Classe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("DadoVida")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdHabilidadeConjuracao")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("IdSalvaguardas")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("PapelTatico")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("UsaMagiaPreparada")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.DificuldadePericia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.Property<int>("Valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PericiaId");

                    b.HasIndex("PericiaId1");

                    b.ToTable("DificuldadePericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.EspacoMagiaPorNivel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoMagia")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.HasIndex("ClasseId1");

                    b.ToTable("EspacoMagiaPorNivel");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.FichaPersonagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlinhamentoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BolsaDeMoedasId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Carisma")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Constituicao")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<int>("Deslocamento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Destreza")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EstaAtivo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experiencia")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Forca")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdiomaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Inteligencia")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("JogadorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RacaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sabedoria")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubracaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tamanho")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VisaoNoEscuro")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BolsaDeMoedasId");

                    b.HasIndex("IdiomaId");

                    b.ToTable("FichaPersonagem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Idioma", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Categoria")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Idioma", (string)null);
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Magia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Alcance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Alvo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AreaEfeito")
                        .HasColumnType("TEXT");

                    b.Property<int>("AtributoTesteResistencia")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ComponenteMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ComponenteMaterialConsumido")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ComponenteSomatico")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ComponenteVerbal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Concentracao")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustoComponenteMaterial")
                        .HasColumnType("TEXT");

                    b.Property<string>("DadoDano")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetalhesMaterial")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DuracaoQuantidade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DuracaoUnidade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EfeitoPorTurno")
                        .HasColumnType("TEXT");

                    b.Property<string>("Escalonamento")
                        .HasColumnType("TEXT");

                    b.Property<int>("Escola")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FocoNecessario")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FormaAreaEfeito")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("LimiteUso")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MetadeNoTeste")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumeroDeUsos")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumeroMaximoAlvos")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PodeSerRitual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Recarga")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequerLinhaDeVisao")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequerLinhaReta")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TempoConjuracao")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoDano")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoUso")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Proficiencia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("BonusAdicional")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TemEspecializacao")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PericiaId");

                    b.ToTable("Proficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.QuantidadePorNivel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.HasIndex("ClasseId1");

                    b.ToTable("QuantidadePorNivel");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Raca", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Raca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Resistencia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoDano")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Resistencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.SubRaca", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<int>("Deslocamento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("RacaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tamanho")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.Property<int>("VisaoNoEscuro")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RacaId");

                    b.ToTable("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Subclasse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.ToTable("Subclasse");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.BolsaDeMoedas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BolsaDeMoedas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.EquipamentoItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("InventarioId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemInventarioId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Slot")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ItemInventarioId");

                    b.ToTable("EquipamentoItem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Inventario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<double>("PesoMaximo")
                        .HasColumnType("REAL");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FichaPersonagemId")
                        .IsUnique();

                    b.ToTable("Inventarios");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.InventarioItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("InventarioId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemBaseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ItemBaseId");

                    b.ToTable("InventarioItem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AnatomiasPermitidas")
                        .HasColumnType("TEXT");

                    b.Property<string>("Categoria")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Empilhavel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Equipavel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<double>("PesoUnitario")
                        .HasColumnType("REAL");

                    b.PrimitiveCollection<string>("RacasPermitidas")
                        .HasColumnType("TEXT");

                    b.Property<int>("ValorCobre")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Item");

                    b.HasDiscriminator().HasValue("Item");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Moeda", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BolsaDeMoedasId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BolsaDeMoedasId");

                    b.ToTable("Moeda");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.OpcaoEscolha<DnDBot.Bot.Models.Ficha.Idioma>", b =>
                {
                    b.Property<int>("QuantidadeEscolhas")
                        .HasColumnType("INTEGER");

                    b.ToTable("OpcaoEscolha<Idioma>");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.OpcaoEscolha<DnDBot.Bot.Models.Pericia>", b =>
                {
                    b.Property<int>("QuantidadeEscolhas")
                        .HasColumnType("INTEGER");

                    b.ToTable("OpcaoEscolha<Pericia>");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Pericia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtributoBase")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pericia");
                });

            modelBuilder.Entity("FerramentaPericia", b =>
                {
                    b.Property<string>("FerramentaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("FerramentaId", "PericiaId");

                    b.HasIndex("PericiaId");

                    b.ToTable("FerramentaPericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Arma", b =>
                {
                    b.HasBaseType("DnDBot.Bot.Models.ItensInventario.Item");

                    b.Property<int?>("Alcance")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlcanceArremesso")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AreaAtaque")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AtaquesEspeciais")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("BonusContraTipos")
                        .HasColumnType("TEXT");

                    b.Property<int>("BonusMagico")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoriaArma")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CustoReparo")
                        .HasColumnType("TEXT");

                    b.Property<string>("DadoDano")
                        .HasColumnType("TEXT");

                    b.Property<string>("DadoDanoVersatil")
                        .HasColumnType("TEXT");

                    b.Property<int>("DurabilidadeAtual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurabilidadeMaxima")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EMagica")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EhDuasMaos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EhLeve")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EhVersatil")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fabricante")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("MagiasAssociadas")
                        .HasColumnType("TEXT");

                    b.Property<int>("MunicaoPorAtaque")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PodeSerArremessada")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("PropriedadesEspeciais")
                        .HasColumnType("TEXT");

                    b.Property<string>("Raridade")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegraCritico")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequerRecarga")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Requisitos")
                        .HasColumnType("TEXT");

                    b.Property<int>("TempoRecargaTurnos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoAcao")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoDano")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TipoDanoSecundario")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoMunicao")
                        .HasColumnType("TEXT");

                    b.ToTable("Item", t =>
                        {
                            t.Property("BonusMagico")
                                .HasColumnName("Arma_BonusMagico");

                            t.Property("DurabilidadeAtual")
                                .HasColumnName("Arma_DurabilidadeAtual");

                            t.Property("DurabilidadeMaxima")
                                .HasColumnName("Arma_DurabilidadeMaxima");

                            t.Property("EMagica")
                                .HasColumnName("Arma_EMagica");

                            t.Property("Fabricante")
                                .HasColumnName("Arma_Fabricante");

                            t.Property("PropriedadesEspeciais")
                                .HasColumnName("Arma_PropriedadesEspeciais");

                            t.Property("Raridade")
                                .HasColumnName("Arma_Raridade");

                            t.Property("Tipo")
                                .HasColumnName("Arma_Tipo");
                        });

                    b.HasDiscriminator().HasValue("Arma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Armadura", b =>
                {
                    b.HasBaseType("DnDBot.Bot.Models.ItensInventario.Item");

                    b.Property<int>("BonusMagico")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClasseArmadura")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Custo")
                        .HasColumnType("TEXT");

                    b.Property<int>("DurabilidadeAtual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurabilidadeMaxima")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EMagica")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fabricante")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ImunidadesDano")
                        .HasColumnType("TEXT");

                    b.Property<string>("Material")
                        .HasColumnType("TEXT");

                    b.Property<int>("PenalidadeFurtividade")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PermiteFurtividade")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("PropriedadesEspeciais")
                        .HasColumnType("TEXT");

                    b.Property<string>("Raridade")
                        .HasColumnType("TEXT");

                    b.Property<int>("RequisitoForca")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("ResistenciasDano")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Armadura");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Ferramenta", b =>
                {
                    b.HasBaseType("DnDBot.Bot.Models.ItensInventario.Item");

                    b.Property<bool>("RequerProficiencia")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Ferramenta");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AlinhamentoTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Alinhamento", "Alinhamento")
                        .WithMany("AlinhamentoTags")
                        .HasForeignKey("AlinhamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alinhamento");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteCaracteristica", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Caracteristicas")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Caracteristica", "Caracteristica")
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Caracteristica");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteDefeito", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Defeitos")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Defeito", "Defeito")
                        .WithMany()
                        .HasForeignKey("DefeitoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Defeito");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteFerramenta", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Ferramentas")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Ferramenta", "Ferramenta")
                        .WithMany()
                        .HasForeignKey("FerramentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Ferramenta");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteIdeal", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Ideais")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Ideal", "Ideal")
                        .WithMany()
                        .HasForeignKey("IdealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Ideal");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteIdioma", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Idiomas")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Idioma", "Idioma")
                        .WithMany()
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Idioma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteItem", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("itens")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteMoeda", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Moedas")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Moeda", "Moeda")
                        .WithMany()
                        .HasForeignKey("MoedaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Moeda");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedentePericia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Pericias")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Pericia", "Pericia")
                        .WithMany()
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Pericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("AntecedenteTags")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteVinculo", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Vinculos")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Vinculo", "Vinculo")
                        .WithMany()
                        .HasForeignKey("VinculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Vinculo");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaRequisitoAtributo", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Arma", "Arma")
                        .WithMany("RequisitosAtributos")
                        .HasForeignKey("ArmaId");

                    b.Navigation("Arma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Arma", "Arma")
                        .WithMany("ArmaTags")
                        .HasForeignKey("ArmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaduraTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Armadura", "Armadura")
                        .WithMany("ArmaduraTags")
                        .HasForeignKey("ArmaduraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armadura");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseItens", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("IdItensIniciais")
                        .HasForeignKey("ClasseId1");

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseMagia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("MagiasDisponiveis")
                        .HasForeignKey("ClasseId1");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseMoeda", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("Moedas")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Moeda", "Moeda")
                        .WithMany()
                        .HasForeignKey("MoedaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Moeda");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClassePericia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("PericiasRelacionadas")
                        .HasForeignKey("ClasseId1");

                    b.HasOne("DnDBot.Bot.Models.Pericia", "Pericia")
                        .WithMany()
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Pericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseProficiencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("Proficiencias")
                        .HasForeignKey("ClasseId1");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Proficiencia", "Proficiencia")
                        .WithMany()
                        .HasForeignKey("ProficienciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Proficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseSalvaguarda", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("ClasseTags")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FerramentaTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Ferramenta", "Ferramenta")
                        .WithMany("FerramentaTags")
                        .HasForeignKey("FerramentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ferramenta");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemCaracteristica", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Caracteristica", "Caracteristica")
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("Caracteristicas")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caracteristica");

                    b.Navigation("FichaPersonagem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemIdioma", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("Idiomas")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Idioma", "Idioma")
                        .WithMany()
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");

                    b.Navigation("Idioma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemMagia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("MagiasRaciais")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemProficiencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("Proficiencias")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Proficiencia", "Proficiencia")
                        .WithMany()
                        .HasForeignKey("ProficienciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");

                    b.Navigation("Proficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemResistencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("Resistencias")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Resistencia", "Resistencia")
                        .WithMany()
                        .HasForeignKey("ResistenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");

                    b.Navigation("Resistencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("FichaPersonagemTags")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaClassePermitida", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", null)
                        .WithMany("ClassesPermitidas")
                        .HasForeignKey("MagiaId1");

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaCondicaoAplicada", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", null)
                        .WithMany("CondicoesAplicadas")
                        .HasForeignKey("MagiaId1");

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaCondicaoRemovida", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", null)
                        .WithMany("CondicoesRemovidas")
                        .HasForeignKey("MagiaId1");

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany("MagiaTags")
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.RacaTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Raca", "Raca")
                        .WithMany("RacaTags")
                        .HasForeignKey("RacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Raca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaAlinhamento", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Alinhamento", "Alinhamento")
                        .WithMany()
                        .HasForeignKey("AlinhamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("AlinhamentosComuns")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alinhamento");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaCaracteristica", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Caracteristica", "Caracteristica")
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("Caracteristicas")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caracteristica");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaIdioma", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Idioma", "Idioma")
                        .WithMany()
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("Idiomas")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idioma");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaMagia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("MagiasRaciais")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Magia");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaProficiencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Proficiencia", "Proficiencia")
                        .WithMany()
                        .HasForeignKey("ProficienciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("Proficiencias")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiencia");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaResistencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Resistencia", "Resistencia")
                        .WithMany()
                        .HasForeignKey("ResistenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("Resistencias")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resistencia");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("SubRacaTags")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.BonusAtributo", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", null)
                        .WithMany("BonusAtributos")
                        .HasForeignKey("FichaPersonagemId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", null)
                        .WithMany("BonusAtributos")
                        .HasForeignKey("SubRacaId");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.CaracteristicaPorNivel", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Caracteristica", "Caracteristica")
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("CaracteristicasPorNivelList")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId1");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Subclasse", null)
                        .WithMany("CaracteristicasPorNivelList")
                        .HasForeignKey("SubclasseId");

                    b.Navigation("Caracteristica");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.DificuldadePericia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Pericia", null)
                        .WithMany("Dificuldades")
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDBot.Bot.Models.Pericia", "Pericia")
                        .WithMany()
                        .HasForeignKey("PericiaId1");

                    b.Navigation("Pericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.EspacoMagiaPorNivel", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("EspacosMagia")
                        .HasForeignKey("ClasseId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId1");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.FichaPersonagem", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.BolsaDeMoedas", "BolsaDeMoedas")
                        .WithMany()
                        .HasForeignKey("BolsaDeMoedasId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Idioma", null)
                        .WithMany("Fichas")
                        .HasForeignKey("IdiomaId");

                    b.Navigation("BolsaDeMoedas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Proficiencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Pericia", "Pericia")
                        .WithMany()
                        .HasForeignKey("PericiaId");

                    b.Navigation("Pericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.QuantidadePorNivel", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("TruquesConhecidosPorNivelList")
                        .HasForeignKey("ClasseId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("MagiasConhecidasPorNivelList")
                        .HasForeignKey("ClasseId1");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.SubRaca", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Raca", "Raca")
                        .WithMany("SubRaca")
                        .HasForeignKey("RacaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Raca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Subclasse", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("Subclasses")
                        .HasForeignKey("ClasseId");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.EquipamentoItem", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Inventario", "Inventario")
                        .WithMany("Equipados")
                        .HasForeignKey("InventarioId");

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.InventarioItem", "ItemInventario")
                        .WithMany()
                        .HasForeignKey("ItemInventarioId");

                    b.Navigation("Inventario");

                    b.Navigation("ItemInventario");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Inventario", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithOne("Inventario")
                        .HasForeignKey("DnDBot.Bot.Models.ItensInventario.Inventario", "FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.InventarioItem", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Inventario", null)
                        .WithMany("Itens")
                        .HasForeignKey("InventarioId");

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", "ItemBase")
                        .WithMany()
                        .HasForeignKey("ItemBaseId");

                    b.Navigation("ItemBase");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Moeda", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.BolsaDeMoedas", null)
                        .WithMany("Moedas")
                        .HasForeignKey("BolsaDeMoedasId");
                });

            modelBuilder.Entity("FerramentaPericia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Ferramenta", null)
                        .WithMany()
                        .HasForeignKey("FerramentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Pericia", null)
                        .WithMany()
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDBot.Bot.Models.AntecedenteModels.Antecedente", b =>
                {
                    b.Navigation("AntecedenteTags");

                    b.Navigation("Caracteristicas");

                    b.Navigation("Defeitos");

                    b.Navigation("Ferramentas");

                    b.Navigation("Ideais");

                    b.Navigation("Idiomas");

                    b.Navigation("Moedas");

                    b.Navigation("Pericias");

                    b.Navigation("Vinculos");

                    b.Navigation("itens");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Alinhamento", b =>
                {
                    b.Navigation("AlinhamentoTags");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Classe", b =>
                {
                    b.Navigation("CaracteristicasPorNivelList");

                    b.Navigation("ClasseTags");

                    b.Navigation("EspacosMagia");

                    b.Navigation("IdItensIniciais");

                    b.Navigation("MagiasConhecidasPorNivelList");

                    b.Navigation("MagiasDisponiveis");

                    b.Navigation("Moedas");

                    b.Navigation("PericiasRelacionadas");

                    b.Navigation("Proficiencias");

                    b.Navigation("Subclasses");

                    b.Navigation("TruquesConhecidosPorNivelList");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.FichaPersonagem", b =>
                {
                    b.Navigation("BonusAtributos");

                    b.Navigation("Caracteristicas");

                    b.Navigation("FichaPersonagemTags");

                    b.Navigation("Idiomas");

                    b.Navigation("Inventario");

                    b.Navigation("MagiasRaciais");

                    b.Navigation("Proficiencias");

                    b.Navigation("Resistencias");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Idioma", b =>
                {
                    b.Navigation("Fichas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Magia", b =>
                {
                    b.Navigation("ClassesPermitidas");

                    b.Navigation("CondicoesAplicadas");

                    b.Navigation("CondicoesRemovidas");

                    b.Navigation("MagiaTags");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Raca", b =>
                {
                    b.Navigation("RacaTags");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.SubRaca", b =>
                {
                    b.Navigation("AlinhamentosComuns");

                    b.Navigation("BonusAtributos");

                    b.Navigation("Caracteristicas");

                    b.Navigation("Idiomas");

                    b.Navigation("MagiasRaciais");

                    b.Navigation("Proficiencias");

                    b.Navigation("Resistencias");

                    b.Navigation("SubRacaTags");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Subclasse", b =>
                {
                    b.Navigation("CaracteristicasPorNivelList");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.BolsaDeMoedas", b =>
                {
                    b.Navigation("Moedas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Inventario", b =>
                {
                    b.Navigation("Equipados");

                    b.Navigation("Itens");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Pericia", b =>
                {
                    b.Navigation("Dificuldades");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Arma", b =>
                {
                    b.Navigation("ArmaTags");

                    b.Navigation("RequisitosAtributos");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Armadura", b =>
                {
                    b.Navigation("ArmaduraTags");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Ferramenta", b =>
                {
                    b.Navigation("FerramentaTags");
                });
#pragma warning restore 612, 618
        }
    }
}
