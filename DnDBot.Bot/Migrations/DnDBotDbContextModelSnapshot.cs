// <auto-generated />
using System;
using DnDBot.Bot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DnDBot.Bot.Migrations
{
    [DbContext(typeof(DnDBotDbContext))]
    partial class DnDBotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("DnDBot.Bot.Models.AntecedenteModels.Antecedente", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("CaracteristicaIds")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Caracteristicas");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("IdiomasAdicionais")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagemUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Ouro")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pagina")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("QntOpcoesItem")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QntOpcoesProficiencia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Antecedente");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Alinhamento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Alinhamento");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AlinhamentoTag", b =>
                {
                    b.Property<string>("AlinhamentoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("AlinhamentoId", "Tag");

                    b.ToTable("AlinhamentoTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteCaracteristica", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaracteristicaId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "CaracteristicaId");

                    b.HasIndex("CaracteristicaId");

                    b.ToTable("AntecedenteCaracteristica");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteItem", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("AntecedenteItem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteItemOpcoes", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("AntecedenteItemOpcoes");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteNarrativa", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AntecedenteId");

                    b.ToTable("AntecedenteNarrativa");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteNarrativaTag", b =>
                {
                    b.Property<string>("AntecedenteNarrativaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteNarrativaId", "Tag");

                    b.ToTable("AntecedenteNarrativaTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteProficiencia", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProficienciaId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "ProficienciaId");

                    b.HasIndex("ProficienciaId");

                    b.ToTable("AntecedenteProficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteProficienciaOpcoes", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProficienciaId")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "ProficienciaId");

                    b.HasIndex("ProficienciaId");

                    b.ToTable("AntecedenteProficienciaOpcoes");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteTag", b =>
                {
                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("AntecedenteId", "Tag");

                    b.ToTable("AntecedenteTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaRequisitoAtributo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArmaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Atributo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArmaId");

                    b.ToTable("ArmaRequisitoAtributo");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaTag", b =>
                {
                    b.Property<string>("ArmaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("ArmaId", "Tag");

                    b.ToTable("ArmaTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaduraImunidade", b =>
                {
                    b.Property<string>("ArmaduraId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImunidadeId")
                        .HasColumnType("TEXT");

                    b.HasKey("ArmaduraId", "ImunidadeId");

                    b.HasIndex("ImunidadeId");

                    b.ToTable("ArmaduraImunidadeDano");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaduraPropriedadeEspecial", b =>
                {
                    b.Property<string>("ArmaduraId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropriedadeEspecialId")
                        .HasColumnType("TEXT");

                    b.HasKey("ArmaduraId", "PropriedadeEspecialId");

                    b.HasIndex("PropriedadeEspecialId");

                    b.ToTable("ArmaduraPropriedadeEspecial");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaduraResistencia", b =>
                {
                    b.Property<string>("ArmaduraId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResistenciaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ArmaduraId", "ResistenciaId");

                    b.HasIndex("ResistenciaId");

                    b.ToTable("ArmaduraResistencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaduraTag", b =>
                {
                    b.Property<string>("ArmaduraId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("ArmaduraId", "Tag");

                    b.ToTable("ArmaduraTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseHabilidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseProgressaoClasseId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClasseProgressaoNivel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Escalavel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.HasIndex("ClasseProgressaoClasseId", "ClasseProgressaoNivel");

                    b.ToTable("ClasseHabilidade");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseItemFixo", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClasseId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ClasseItemFixo");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseItemOpcaoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<int>("OpcaoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OpcaoId");

                    b.ToTable("ClasseItemOpcaoItem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseMagia", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "MagiaId");

                    b.HasIndex("MagiaId");

                    b.ToTable("ClasseMagia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoItemGrupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.ToTable("ClasseOpcaoItemGrupo");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoItemOpcao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GrupoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.ToTable("ClasseOpcaoItemOpcao");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoPericia", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "PericiaId");

                    b.HasIndex("PericiaId");

                    b.ToTable("ClasseOpcaoPericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoProficiencia", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProficienciaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "ProficienciaId");

                    b.HasIndex("ProficienciaId");

                    b.ToTable("ClasseOpcaoProficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseProficiencia", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProficienciaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "ProficienciaId");

                    b.HasIndex("ProficienciaId");

                    b.ToTable("ClasseProficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseProgressao", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AtaqueExtra")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AtaqueFurtivo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusProficiencia")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Espaco1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Espaco2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Espaco3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Espaco4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Espaco5")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Espaco6")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Espaco7")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Espaco8")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Espaco9")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EspacosMagia")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Indomavel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InfusoesConhecidas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvocacoesConhecidas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItensInfundidos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MagiasConhecidas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NivelMagia")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PontosChi")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PontosFeiticaria")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PontosFuria")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubclasseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SurtoAcao")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TruquesConhecidos")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClasseId", "Nivel");

                    b.ToTable("ClasseProgressao");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseSalvaguarda", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSalvaguarda")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "IdSalvaguarda");

                    b.ToTable("ClasseSalvaguarda");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseTag", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "Tag");

                    b.ToTable("ClasseTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.EscudoPropriedadeEspecial", b =>
                {
                    b.Property<string>("EscudoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Propriedade")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("EscudoId1")
                        .HasColumnType("TEXT");

                    b.HasKey("EscudoId", "Propriedade");

                    b.HasIndex("EscudoId1");

                    b.ToTable("EscudoPropriedadeEspecial");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FerramentaPericia", b =>
                {
                    b.Property<string>("FerramentaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("FerramentaId", "PericiaId");

                    b.HasIndex("PericiaId");

                    b.ToTable("FerramentaPericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FerramentaTag", b =>
                {
                    b.Property<string>("FerramentaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("FerramentaId", "Tag");

                    b.ToTable("FerramentaTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemCaracteristica", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaracteristicaId")
                        .HasColumnType("TEXT");

                    b.HasKey("FichaPersonagemId", "CaracteristicaId");

                    b.HasIndex("CaracteristicaId");

                    b.ToTable("FichaPersonagemCaracteristica");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemIdioma", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdiomaId")
                        .HasColumnType("TEXT");

                    b.HasKey("FichaPersonagemId", "IdiomaId");

                    b.HasIndex("IdiomaId");

                    b.ToTable("FichaPersonagemIdioma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemMagia", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("FichaPersonagemId", "MagiaId");

                    b.HasIndex("MagiaId");

                    b.ToTable("FichaPersonagemMagia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemProficiencia", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProficienciaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("BonusAdicional")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TemEspecializacao")
                        .HasColumnType("INTEGER");

                    b.HasKey("FichaPersonagemId", "ProficienciaId");

                    b.HasIndex("ProficienciaId");

                    b.ToTable("FichaPersonagemProficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemResistencia", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResistenciaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoDano")
                        .HasColumnType("INTEGER");

                    b.HasKey("FichaPersonagemId", "ResistenciaId");

                    b.HasIndex("ResistenciaId");

                    b.ToTable("FichaPersonagemResistencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemTag", b =>
                {
                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("FichaPersonagemId", "Tag");

                    b.ToTable("FichaPersonagemTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ItemMaterial", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaterialId")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId", "MaterialId");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.HasIndex("MaterialId");

                    b.ToTable("ItemMaterial");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ItemRaca", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RacaId")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId", "RacaId");

                    b.HasIndex("RacaId");

                    b.ToTable("ItemRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaClassePermitida", b =>
                {
                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Classe")
                        .HasColumnType("INTEGER");

                    b.HasKey("MagiaId", "Classe");

                    b.ToTable("MagiaClassePermitida");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaCondicaoAplicada", b =>
                {
                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Condicao")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EfeitoEscalonadoId")
                        .HasColumnType("TEXT");

                    b.HasKey("MagiaId", "Condicao");

                    b.HasIndex("EfeitoEscalonadoId");

                    b.ToTable("MagiaCondicaoAplicada");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaCondicaoRemovida", b =>
                {
                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Condicao")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EfeitoEscalonadoId")
                        .HasColumnType("TEXT");

                    b.HasKey("MagiaId", "Condicao");

                    b.HasIndex("EfeitoEscalonadoId");

                    b.ToTable("MagiaCondicaoRemovida");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaTag", b =>
                {
                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("MagiaId", "Tag");

                    b.ToTable("MagiaTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.RacaTag", b =>
                {
                    b.Property<string>("RacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("RacaId", "Tag");

                    b.ToTable("RacaTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaAlinhamento", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlinhamentoId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "AlinhamentoId");

                    b.HasIndex("AlinhamentoId");

                    b.ToTable("SubRacaAlinhamento");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaCaracteristica", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaracteristicaId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "CaracteristicaId");

                    b.HasIndex("CaracteristicaId");

                    b.ToTable("SubRacaCaracteristica");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaIdioma", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdiomaId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "IdiomaId");

                    b.HasIndex("IdiomaId");

                    b.ToTable("SubRacaIdioma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaMagia", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "MagiaId");

                    b.HasIndex("MagiaId");

                    b.ToTable("SubRacaMagia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaProficiencia", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProficienciaId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "ProficienciaId");

                    b.HasIndex("ProficienciaId");

                    b.ToTable("SubRacaProficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaResistencia", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResistenciaId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "ResistenciaId");

                    b.HasIndex("ResistenciaId");

                    b.ToTable("SubRacaResistencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaTag", b =>
                {
                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("SubRacaId", "Tag");

                    b.ToTable("SubRacaTag");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ValorPorNivel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClasseHabilidadeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClasseHabilidadeId");

                    b.ToTable("ValorPorNivel");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.BonusAtributo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Atributo")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Origem")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubRacaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FichaPersonagemId");

                    b.HasIndex("SubRacaId");

                    b.ToTable("BonusAtributos", (string)null);
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Caracteristica", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrigemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Caracteristica");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.CaracteristicaPorNivel", b =>
                {
                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaracteristicaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("RacaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubclasseId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClasseId", "Nivel", "CaracteristicaId");

                    b.HasIndex("AntecedenteId");

                    b.HasIndex("CaracteristicaId");

                    b.HasIndex("ClasseId1");

                    b.HasIndex("RacaId");

                    b.HasIndex("SubclasseId");

                    b.ToTable("CaracteristicaPorNivel");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Classe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("DadoVida")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("FocoConjuracao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdHabilidadeConjuracao")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("IdSalvaguardas")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("Ouro")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("PapelTatico")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("QntOpcoesPericias")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QntOpcoesProficiencias")
                        .HasColumnType("INTEGER")
                        .HasColumnName("QntOpcoesProficiencias");

                    b.Property<bool>("UsaMagiaPreparada")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.DificuldadePericia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.Property<int>("Valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PericiaId");

                    b.HasIndex("PericiaId1");

                    b.ToTable("DificuldadePericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.EspacoMagiaPorNivel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoMagia")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.HasIndex("ClasseId1");

                    b.ToTable("EspacoMagiaPorNivel");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.FichaPersonagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlinhamentoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AntecedenteId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BolsaDeMoedasId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Carisma")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Constituicao")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<int>("Deslocamento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Destreza")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EstaAtivo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experiencia")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Forca")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdiomaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Inteligencia")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("JogadorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RacaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sabedoria")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubracaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tamanho")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VisaoNoEscuro")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BolsaDeMoedasId");

                    b.HasIndex("IdiomaId");

                    b.ToTable("FichaPersonagem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Idioma", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Categoria")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Idioma", (string)null);
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Magia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ComponenteMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ComponenteMaterialConsumido")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ComponenteSomatico")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ComponenteVerbal")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustoComponenteMaterial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetalhesMaterial")
                        .HasColumnType("TEXT");

                    b.Property<int>("Escola")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PodeSerRitual")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Proficiencia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("BonusAdicional")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PericiaId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TemEspecializacao")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PericiaId");

                    b.ToTable("Proficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.QuantidadePorNivel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nivel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.HasIndex("ClasseId1");

                    b.ToTable("QuantidadePorNivel");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Raca", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Raca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Resistencia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoDano")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Resistencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.SubRaca", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<int>("Deslocamento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("RacaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tamanho")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.Property<int>("VisaoNoEscuro")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RacaId");

                    b.ToTable("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Subclasse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClasseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.ToTable("Subclasse");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Auxiliares.InventarioItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("InventarioId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemBaseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ItemBaseId");

                    b.ToTable("InventarioItem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.BolsaDeMoedas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BolsaDeMoedas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.EfeitoDano", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DadoDano")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EfeitoEscalonadoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoDano")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EfeitoEscalonadoId");

                    b.ToTable("EfeitoDano");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.EfeitoEscalonado", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AcaoRequerida")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alcance")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alvo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AtributoTesteResistencia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CaracteristicaId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Concentracao")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CondicaoAtivacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DescricaoEfeito")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DuracaoEmRodadas")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DuracaoQuantidade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DuracaoUnidade")
                        .HasColumnType("TEXT");

                    b.Property<string>("FocoNecessario")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FormaAreaEfeito")
                        .HasColumnType("TEXT");

                    b.Property<string>("MagiaId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MetadeNoTeste")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NivelMaximo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NivelMinimo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumeroMaximoAlvos")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Recarga")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequerLinhaDeVisao")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequerLinhaReta")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TempoConjuracao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoUso")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UsosPorDescansoCurto")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UsosPorDescansoLongo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CaracteristicaId");

                    b.HasIndex("MagiaId");

                    b.ToTable("EfeitoEscalonado");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.EquipamentoItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("InventarioId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemInventarioId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Slot")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ItemInventarioId");

                    b.ToTable("EquipamentoItem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Imunidade", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoDano")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Imunidade");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Inventario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FichaPersonagemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<double>("PesoMaximo")
                        .HasColumnType("REAL");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FichaPersonagemId")
                        .IsUnique();

                    b.ToTable("Inventarios");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AnatomiasPermitidas")
                        .HasColumnType("TEXT");

                    b.Property<int>("Categoria")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Empilhavel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Equipavel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fabricante")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaterialId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Material");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<double>("PesoUnitario")
                        .HasColumnType("REAL");

                    b.Property<string>("PropriedadesMagicasId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Raridade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubCategoria")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ValorCobre")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PropriedadesMagicasId");

                    b.ToTable("Item", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Material", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("BonusAtaque")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusCA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusDano")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CustoMultiplicador")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IgnoraCritico")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IgnoraDesvantagemFurtividade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ImunidadesDano")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<double>("PesoRelativo")
                        .HasColumnType("REAL");

                    b.PrimitiveCollection<string>("ResistenciasDano")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Moeda", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BolsaDeMoedasId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BolsaDeMoedasId");

                    b.ToTable("Moeda");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.PropriedadeEspecial", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PropriedadeEspecial");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.PropriedadesMagicas", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("BonusContraTipos")
                        .HasColumnType("TEXT");

                    b.Property<int>("BonusMagico")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CargasAtuais")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CargasMaximas")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Efeitos")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EhConsumivel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fonte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("MagiasAssociadas")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasColumnType("TEXT");

                    b.Property<string>("Raridade")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequerSintonizacao")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("RequisitosSintonizacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsosEspeciais")
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PropriedadesMagicas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Pericia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtributoBase")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonte")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModificadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pagina")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Versao")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Arma", b =>
                {
                    b.HasBaseType("DnDBot.Bot.Models.ItensInventario.Item");

                    b.Property<int?>("AlcanceArremesso")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlcanceMaximo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlcanceMinimo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AreaAtaque")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("AtaquesEspeciais")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("BonusContraTipos")
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoriaArma")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DadoDano")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("DadoDanoVersatil")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("DurabilidadeAtual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurabilidadeMaxima")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EhAgil")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EhDuasMaos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EhLeve")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EhPesada")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EhVersatil")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("MagiasAssociadas")
                        .HasColumnType("TEXT");

                    b.Property<int>("MunicaoPorAtaque")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PodeSerArremessada")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("PropriedadesEspeciais")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegraCritico")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequerRecarga")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Requisitos")
                        .HasColumnType("TEXT");

                    b.Property<int>("TempoRecargaTurnos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoAcao")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoDano")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TipoDanoSecundario")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoMunicao")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.ToTable("Arma", (string)null);
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Armadura", b =>
                {
                    b.HasBaseType("DnDBot.Bot.Models.ItensInventario.Item");

                    b.Property<int>("BonusDestrezaMaximo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClasseArmadura")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurabilidadeAtual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurabilidadeMaxima")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ImpedeFurtividade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequisitoForca")
                        .HasColumnType("INTEGER");

                    b.ToTable("Armadura", (string)null);
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Escudo", b =>
                {
                    b.HasBaseType("DnDBot.Bot.Models.ItensInventario.Item");

                    b.Property<int>("BonusCA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(2);

                    b.Property<int>("DurabilidadeAtual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurabilidadeMaxima")
                        .HasColumnType("INTEGER");

                    b.ToTable("Escudo");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Ferramenta", b =>
                {
                    b.HasBaseType("DnDBot.Bot.Models.ItensInventario.Item");

                    b.Property<bool>("RequerProficiencia")
                        .HasColumnType("INTEGER");

                    b.ToTable("Ferramenta");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AlinhamentoTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Alinhamento", "Alinhamento")
                        .WithMany("AlinhamentoTags")
                        .HasForeignKey("AlinhamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alinhamento");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteCaracteristica", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Caracteristicas")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Caracteristica", "Caracteristica")
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Caracteristica");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteItem", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Itens")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteItemOpcoes", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("OpcoesItens")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteNarrativa", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Narrativas")
                        .HasForeignKey("AntecedenteId");

                    b.Navigation("Antecedente");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteNarrativaTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteNarrativa", "Antecedente")
                        .WithMany("AntecedenteNarrativaTags")
                        .HasForeignKey("AntecedenteNarrativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteProficiencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("Proficiencias")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Proficiencia", "Proficiencia")
                        .WithMany()
                        .HasForeignKey("ProficienciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Proficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteProficienciaOpcoes", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("OpcoesProficiencia")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Proficiencia", "Proficiencia")
                        .WithMany()
                        .HasForeignKey("ProficienciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");

                    b.Navigation("Proficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany("AntecedenteTags")
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antecedente");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaRequisitoAtributo", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Arma", "Arma")
                        .WithMany("RequisitosAtributos")
                        .HasForeignKey("ArmaId");

                    b.Navigation("Arma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Arma", "Arma")
                        .WithMany("ArmaTags")
                        .HasForeignKey("ArmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaduraImunidade", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Armadura", "Armadura")
                        .WithMany("Imunidades")
                        .HasForeignKey("ArmaduraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Imunidade", "Imunidade")
                        .WithMany()
                        .HasForeignKey("ImunidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armadura");

                    b.Navigation("Imunidade");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaduraPropriedadeEspecial", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Armadura", "Armadura")
                        .WithMany("PropriedadesEspeciais")
                        .HasForeignKey("ArmaduraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.PropriedadeEspecial", "PropriedadeEspecial")
                        .WithMany()
                        .HasForeignKey("PropriedadeEspecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armadura");

                    b.Navigation("PropriedadeEspecial");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaduraResistencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Armadura", "Armadura")
                        .WithMany("Resistencias")
                        .HasForeignKey("ArmaduraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Resistencia", "Resistencia")
                        .WithMany()
                        .HasForeignKey("ResistenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armadura");

                    b.Navigation("Resistencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ArmaduraTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Armadura", "Armadura")
                        .WithMany("ArmaduraTags")
                        .HasForeignKey("ArmaduraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armadura");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseHabilidade", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("HabilidadesEspecificas")
                        .HasForeignKey("ClasseId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseProgressao", null)
                        .WithMany("HabilidadesGanhas")
                        .HasForeignKey("ClasseProgressaoClasseId", "ClasseProgressaoNivel");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseItemFixo", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("Itens")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseItemOpcaoItem", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoItemOpcao", "Opcao")
                        .WithMany("Itens")
                        .HasForeignKey("OpcaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Opcao");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseMagia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("Magias")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoItemGrupo", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("ItensOpcoes")
                        .HasForeignKey("ClasseId");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoItemOpcao", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoItemGrupo", "Grupo")
                        .WithMany("Opcoes")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoPericia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("OpcoesPericias")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Pericia", "Pericia")
                        .WithMany()
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Pericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoProficiencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("OpcoesProficiencias")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Proficiencia", "Proficiencia")
                        .WithMany()
                        .HasForeignKey("ProficienciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Proficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseProficiencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("Proficiencias")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Proficiencia", "Proficiencia")
                        .WithMany()
                        .HasForeignKey("ProficienciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Proficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseProgressao", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseSalvaguarda", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("ClasseTags")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.EscudoPropriedadeEspecial", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Escudo", null)
                        .WithMany()
                        .HasForeignKey("EscudoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Escudo", "Escudo")
                        .WithMany("PropriedadesEspeciais")
                        .HasForeignKey("EscudoId1");

                    b.Navigation("Escudo");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FerramentaPericia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Ferramenta", "Ferramenta")
                        .WithMany("PericiasAssociadas")
                        .HasForeignKey("FerramentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Pericia", "Pericia")
                        .WithMany()
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ferramenta");

                    b.Navigation("Pericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FerramentaTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Ferramenta", "Ferramenta")
                        .WithMany("FerramentaTags")
                        .HasForeignKey("FerramentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ferramenta");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemCaracteristica", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Caracteristica", "Caracteristica")
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("Caracteristicas")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caracteristica");

                    b.Navigation("FichaPersonagem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemIdioma", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("Idiomas")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Idioma", "Idioma")
                        .WithMany()
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");

                    b.Navigation("Idioma");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemMagia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("MagiasRaciais")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemProficiencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("Proficiencias")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Proficiencia", "Proficiencia")
                        .WithMany()
                        .HasForeignKey("ProficienciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");

                    b.Navigation("Proficiencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemResistencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("Resistencias")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Resistencia", "Resistencia")
                        .WithMany()
                        .HasForeignKey("ResistenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");

                    b.Navigation("Resistencia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.FichaPersonagemTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithMany("FichaPersonagemTags")
                        .HasForeignKey("FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ItemMaterial", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", "Item")
                        .WithOne("Material")
                        .HasForeignKey("DnDBot.Bot.Models.Ficha.Auxiliares.ItemMaterial", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ItemRaca", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", "Item")
                        .WithMany("RacasPermitidas")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Raca", "Raca")
                        .WithMany()
                        .HasForeignKey("RacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Raca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaClassePermitida", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany("ClassesPermitidas")
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaCondicaoAplicada", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.EfeitoEscalonado", null)
                        .WithMany("CondicoesAplicadas")
                        .HasForeignKey("EfeitoEscalonadoId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaCondicaoRemovida", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.EfeitoEscalonado", null)
                        .WithMany("CondicoesRemovidas")
                        .HasForeignKey("EfeitoEscalonadoId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.MagiaTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany("MagiaTags")
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.RacaTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Raca", "Raca")
                        .WithMany("RacaTags")
                        .HasForeignKey("RacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Raca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaAlinhamento", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Alinhamento", "Alinhamento")
                        .WithMany()
                        .HasForeignKey("AlinhamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("AlinhamentosComuns")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alinhamento");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaCaracteristica", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Caracteristica", "Caracteristica")
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("Caracteristicas")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caracteristica");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaIdioma", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Idioma", "Idioma")
                        .WithMany()
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("Idiomas")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idioma");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaMagia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany()
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("MagiasRaciais")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Magia");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaProficiencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Proficiencia", "Proficiencia")
                        .WithMany()
                        .HasForeignKey("ProficienciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("Proficiencias")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiencia");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaResistencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Resistencia", "Resistencia")
                        .WithMany()
                        .HasForeignKey("ResistenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("Resistencias")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resistencia");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.SubRacaTag", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", "SubRaca")
                        .WithMany("SubRacaTags")
                        .HasForeignKey("SubRacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ValorPorNivel", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseHabilidade", "ClasseHabilidade")
                        .WithMany("ValoresPorNivel")
                        .HasForeignKey("ClasseHabilidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClasseHabilidade");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.BonusAtributo", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", null)
                        .WithMany("BonusAtributos")
                        .HasForeignKey("FichaPersonagemId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.SubRaca", null)
                        .WithMany("BonusAtributos")
                        .HasForeignKey("SubRacaId");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.CaracteristicaPorNivel", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.AntecedenteModels.Antecedente", "Antecedente")
                        .WithMany()
                        .HasForeignKey("AntecedenteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDBot.Bot.Models.Ficha.Caracteristica", "Caracteristica")
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("CaracteristicasPorNivelList")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId1");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Raca", "Raca")
                        .WithMany()
                        .HasForeignKey("RacaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDBot.Bot.Models.Ficha.Subclasse", null)
                        .WithMany("CaracteristicasPorNivelList")
                        .HasForeignKey("SubclasseId");

                    b.Navigation("Antecedente");

                    b.Navigation("Caracteristica");

                    b.Navigation("Classe");

                    b.Navigation("Raca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.DificuldadePericia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Pericia", null)
                        .WithMany("Dificuldades")
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDBot.Bot.Models.Pericia", "Pericia")
                        .WithMany()
                        .HasForeignKey("PericiaId1");

                    b.Navigation("Pericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.EspacoMagiaPorNivel", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("EspacosMagia")
                        .HasForeignKey("ClasseId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId1");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.FichaPersonagem", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.BolsaDeMoedas", "BolsaDeMoedas")
                        .WithMany()
                        .HasForeignKey("BolsaDeMoedasId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Idioma", null)
                        .WithMany("Fichas")
                        .HasForeignKey("IdiomaId");

                    b.Navigation("BolsaDeMoedas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Proficiencia", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Pericia", "Pericia")
                        .WithMany()
                        .HasForeignKey("PericiaId");

                    b.Navigation("Pericia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.QuantidadePorNivel", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", "Classe")
                        .WithMany("TruquesConhecidosPorNivelList")
                        .HasForeignKey("ClasseId");

                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("MagiasConhecidasPorNivelList")
                        .HasForeignKey("ClasseId1");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.SubRaca", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Raca", "Raca")
                        .WithMany("SubRaca")
                        .HasForeignKey("RacaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Raca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Subclasse", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Classe", null)
                        .WithMany("Subclasses")
                        .HasForeignKey("ClasseId");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Auxiliares.InventarioItem", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Inventario", null)
                        .WithMany("Itens")
                        .HasForeignKey("InventarioId");

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", "ItemBase")
                        .WithMany()
                        .HasForeignKey("ItemBaseId");

                    b.Navigation("ItemBase");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.EfeitoDano", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.EfeitoEscalonado", "EfeitoEscalonado")
                        .WithMany("Danos")
                        .HasForeignKey("EfeitoEscalonadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EfeitoEscalonado");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.EfeitoEscalonado", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.Caracteristica", "Caracteristica")
                        .WithMany("EfeitoEscalonado")
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDBot.Bot.Models.Ficha.Magia", "Magia")
                        .WithMany("EfeitosEscalonados")
                        .HasForeignKey("MagiaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Caracteristica");

                    b.Navigation("Magia");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.EquipamentoItem", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Inventario", "Inventario")
                        .WithMany("Equipados")
                        .HasForeignKey("InventarioId");

                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Auxiliares.InventarioItem", "ItemInventario")
                        .WithMany()
                        .HasForeignKey("ItemInventarioId");

                    b.Navigation("Inventario");

                    b.Navigation("ItemInventario");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Inventario", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.Ficha.FichaPersonagem", "FichaPersonagem")
                        .WithOne("Inventario")
                        .HasForeignKey("DnDBot.Bot.Models.ItensInventario.Inventario", "FichaPersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaPersonagem");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Item", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.PropriedadesMagicas", "PropriedadesMagicas")
                        .WithMany()
                        .HasForeignKey("PropriedadesMagicasId");

                    b.Navigation("PropriedadesMagicas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Moeda", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.BolsaDeMoedas", null)
                        .WithMany("Moedas")
                        .HasForeignKey("BolsaDeMoedasId");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Arma", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", null)
                        .WithOne()
                        .HasForeignKey("DnDBot.Bot.Models.ItensInventario.Arma", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Armadura", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", null)
                        .WithOne()
                        .HasForeignKey("DnDBot.Bot.Models.ItensInventario.Armadura", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Escudo", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", null)
                        .WithOne()
                        .HasForeignKey("DnDBot.Bot.Models.ItensInventario.Escudo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Ferramenta", b =>
                {
                    b.HasOne("DnDBot.Bot.Models.ItensInventario.Item", null)
                        .WithOne()
                        .HasForeignKey("DnDBot.Bot.Models.ItensInventario.Ferramenta", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDBot.Bot.Models.AntecedenteModels.Antecedente", b =>
                {
                    b.Navigation("AntecedenteTags");

                    b.Navigation("Caracteristicas");

                    b.Navigation("Itens");

                    b.Navigation("Narrativas");

                    b.Navigation("OpcoesItens");

                    b.Navigation("OpcoesProficiencia");

                    b.Navigation("Proficiencias");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Alinhamento", b =>
                {
                    b.Navigation("AlinhamentoTags");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.AntecedenteNarrativa", b =>
                {
                    b.Navigation("AntecedenteNarrativaTags");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseHabilidade", b =>
                {
                    b.Navigation("ValoresPorNivel");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoItemGrupo", b =>
                {
                    b.Navigation("Opcoes");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseOpcaoItemOpcao", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Auxiliares.ClasseProgressao", b =>
                {
                    b.Navigation("HabilidadesGanhas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Caracteristica", b =>
                {
                    b.Navigation("EfeitoEscalonado");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Classe", b =>
                {
                    b.Navigation("CaracteristicasPorNivelList");

                    b.Navigation("ClasseTags");

                    b.Navigation("EspacosMagia");

                    b.Navigation("HabilidadesEspecificas");

                    b.Navigation("Itens");

                    b.Navigation("ItensOpcoes");

                    b.Navigation("Magias");

                    b.Navigation("MagiasConhecidasPorNivelList");

                    b.Navigation("OpcoesPericias");

                    b.Navigation("OpcoesProficiencias");

                    b.Navigation("Proficiencias");

                    b.Navigation("Subclasses");

                    b.Navigation("TruquesConhecidosPorNivelList");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.FichaPersonagem", b =>
                {
                    b.Navigation("BonusAtributos");

                    b.Navigation("Caracteristicas");

                    b.Navigation("FichaPersonagemTags");

                    b.Navigation("Idiomas");

                    b.Navigation("Inventario");

                    b.Navigation("MagiasRaciais");

                    b.Navigation("Proficiencias");

                    b.Navigation("Resistencias");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Idioma", b =>
                {
                    b.Navigation("Fichas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Magia", b =>
                {
                    b.Navigation("ClassesPermitidas");

                    b.Navigation("EfeitosEscalonados");

                    b.Navigation("MagiaTags");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Raca", b =>
                {
                    b.Navigation("RacaTags");

                    b.Navigation("SubRaca");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.SubRaca", b =>
                {
                    b.Navigation("AlinhamentosComuns");

                    b.Navigation("BonusAtributos");

                    b.Navigation("Caracteristicas");

                    b.Navigation("Idiomas");

                    b.Navigation("MagiasRaciais");

                    b.Navigation("Proficiencias");

                    b.Navigation("Resistencias");

                    b.Navigation("SubRacaTags");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Ficha.Subclasse", b =>
                {
                    b.Navigation("CaracteristicasPorNivelList");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.BolsaDeMoedas", b =>
                {
                    b.Navigation("Moedas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.EfeitoEscalonado", b =>
                {
                    b.Navigation("CondicoesAplicadas");

                    b.Navigation("CondicoesRemovidas");

                    b.Navigation("Danos");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Inventario", b =>
                {
                    b.Navigation("Equipados");

                    b.Navigation("Itens");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Item", b =>
                {
                    b.Navigation("Material");

                    b.Navigation("RacasPermitidas");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.Pericia", b =>
                {
                    b.Navigation("Dificuldades");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Arma", b =>
                {
                    b.Navigation("ArmaTags");

                    b.Navigation("RequisitosAtributos");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Armadura", b =>
                {
                    b.Navigation("ArmaduraTags");

                    b.Navigation("Imunidades");

                    b.Navigation("PropriedadesEspeciais");

                    b.Navigation("Resistencias");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Escudo", b =>
                {
                    b.Navigation("PropriedadesEspeciais");
                });

            modelBuilder.Entity("DnDBot.Bot.Models.ItensInventario.Ferramenta", b =>
                {
                    b.Navigation("FerramentaTags");

                    b.Navigation("PericiasAssociadas");
                });
#pragma warning restore 612, 618
        }
    }
}
